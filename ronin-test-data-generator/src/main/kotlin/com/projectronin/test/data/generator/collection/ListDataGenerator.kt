package com.projectronin.test.data.generator.collection

import com.projectronin.test.data.generator.DataGenerator

/**
 * A ListDataGenerator is a special type of [DataGenerator] explicitly for supporting a List of items. The list will be
 * created with entries of type [T] as generated by the [baseGenerator]. A List will have [count] generated entries if
 * no static values are provided. Additional items may be present in the List based off any explicit additional values
 * added.
 */
open class ListDataGenerator<T>(private var count: Int, private val baseGenerator: DataGenerator<T>) :
    DataGenerator<List<T>>() {
    private var additionalValues: MutableList<T> = mutableListOf()

    override fun generateInternal(): List<T> {
        return (1..count).mapNotNull { baseGenerator.generate() } + additionalValues
    }

    /**
     * Changes the number of generated items that will be created.
     *
     * This method is defined as infix to allow for a more readable, DSL-style of setting the value, such as:
     *
     *     values generates 3
     *
     * This method is also setup to allow for a more comprehensive direction such as:
     *
     *     values generates 3 plus "Value 4"
     */
    open infix fun generates(count: Int): ListDataGenerator<T> {
        this.count = count
        return this
    }

    /**
     * Explicitly adds the supplied value to the returned List, as long as a static value is not present.
     *
     * This method is defined as infix to allow for a more readable, DSL-style of setting the value, such as:
     *
     *     values plus "Value 4"
     *
     * This method is also setup to allow for a more comprehensive direction such as:
     *
     *     values generates 3 plus "Value 4" plus "Value 5"
     */
    open infix fun plus(value: T): ListDataGenerator<T> {
        additionalValues.add(value)
        return this
    }
}
